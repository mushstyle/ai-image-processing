import { GoogleGenAI } from "@google/genai";
import * as fs from "node:fs";
import * as path from "node:path";

interface EditOrComposeOptions {
  inputPaths: string[];
  prompt: string;
  outPrefix?: string;
}

const mimeFor = (p: string): string => {
  const ext = path.extname(p).toLowerCase();
  if (ext === ".png") return "image/png";
  if (ext === ".jpg" || ext === ".jpeg") return "image/jpeg";
  if (ext === ".webp") return "image/webp";
  if (ext === ".gif") return "image/gif";
  return "application/octet-stream";
};

export async function editOrCompose({
  inputPaths,
  prompt,
  outPrefix = "gemini_out_",
}: EditOrComposeOptions): Promise<string[]> {
  const apiKey = process.env.GEMINI_API_KEY;
  if (!apiKey) {
    throw new Error("GEMINI_API_KEY is not set in environment variables");
  }

  const ai = new GoogleGenAI({ apiKey });
  
  const contents = [{ text: prompt }].concat(
    inputPaths.map((p) => ({
      inlineData: {
        mimeType: mimeFor(p),
        data: fs.readFileSync(p).toString("base64"),
      },
    }))
  );

  const res = await ai.models.generateContent({
    model: "gemini-2.5-flash-image-preview",
    contents,
  });

  const outputPaths: string[] = [];
  let i = 1;
  
  for (const part of res.candidates?.[0]?.content?.parts ?? []) {
    if (part.inlineData?.data) {
      const buf = Buffer.from(part.inlineData.data, "base64");
      const outputPath = `${outPrefix}${i++}.png`;
      fs.writeFileSync(outputPath, buf);
      outputPaths.push(outputPath);
      console.log(`üíæ Saved image to: ${outputPath}`);
    } else if (part.text) {
      console.log("Model note:", part.text);
    }
  }

  if (outputPaths.length === 0) {
    console.log("‚ö†Ô∏è No images were generated by Gemini");
  }

  return outputPaths;
}