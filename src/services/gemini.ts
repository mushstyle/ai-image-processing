import { GoogleGenAI } from "@google/genai";
import * as fs from "node:fs";
import * as path from "node:path";
import { processImageFile, mimeFor } from "../utils/image-converter.js";
import { tmpdir } from "node:os";

interface EditOrComposeOptions {
  inputPaths: string[];
  prompt: string;
  outPrefix?: string;
}

const getAvailableFilename = (basePath: string): string => {
  // If the file doesn't exist, use it as is
  if (!fs.existsSync(basePath)) {
    return basePath;
  }
  
  // Extract directory, name without extension, and extension
  const dir = path.dirname(basePath);
  const ext = path.extname(basePath);
  const nameWithoutExt = path.basename(basePath, ext);
  
  // Check if the name already ends with a number
  const match = nameWithoutExt.match(/^(.+?)_?(\d+)$/);
  let baseName = match ? match[1] : nameWithoutExt;
  let counter = match ? parseInt(match[2], 10) : 1;
  
  // Find the next available number
  let newPath = basePath;
  while (fs.existsSync(newPath)) {
    counter++;
    newPath = path.join(dir, `${baseName}_${counter}${ext}`);
  }
  
  return newPath;
};

export async function editOrCompose({
  inputPaths,
  prompt,
  outPrefix = "gemini_out_",
}: EditOrComposeOptions): Promise<string[]> {
  const apiKey = process.env.GEMINI_API_KEY;
  if (!apiKey) {
    throw new Error("GEMINI_API_KEY is not set in environment variables");
  }

  const ai = new GoogleGenAI({ apiKey });
  
  // Process input images (convert HEIC if needed)
  const processedPaths: string[] = [];
  const tempFiles: string[] = [];
  
  for (const inputPath of inputPaths) {
    const processedPath = await processImageFile(inputPath, tmpdir());
    processedPaths.push(processedPath);
    // Track temp files for cleanup
    if (processedPath !== inputPath) {
      tempFiles.push(processedPath);
    }
  }
  
  const contents = [{ text: prompt }].concat(
    processedPaths.map((p) => ({
      inlineData: {
        mimeType: mimeFor(p),
        data: fs.readFileSync(p).toString("base64"),
      },
    }))
  );

  const res = await ai.models.generateContent({
    model: "gemini-2.5-flash-image-preview",
    contents,
  });

  const outputPaths: string[] = [];
  let i = 1;
  
  for (const part of res.candidates?.[0]?.content?.parts ?? []) {
    if (part.inlineData?.data) {
      const buf = Buffer.from(part.inlineData.data, "base64");
      const proposedPath = `${outPrefix}${i}.png`;
      const outputPath = getAvailableFilename(proposedPath);
      fs.writeFileSync(outputPath, buf);
      outputPaths.push(outputPath);
      console.log(`üíæ Saved image to: ${outputPath}`);
      i++;
    } else if (part.text) {
      console.log("Model note:", part.text);
    }
  }

  if (outputPaths.length === 0) {
    console.log("‚ö†Ô∏è No images were generated by Gemini");
  }
  
  // Clean up temporary files
  for (const tempFile of tempFiles) {
    try {
      fs.unlinkSync(tempFile);
    } catch {
      // Ignore cleanup errors
    }
  }

  return outputPaths;
}